{-------------------------------------------------------------------------------
-- NOM DU CSU (automate)            : SrcSeq.auto
-- AUTEUR DU CSU                    : P. Pignard
-- VERSION DU CSU                   : 3.0a
-- DATE DE LA DERNIERE MISE A JOUR  : Octobre 2023
-- ROLE DU CSU                      : Automate assurant le décodage syntaxique de
--                                    son langage de descrition d'automates.
--
-- FONCTIONS EXPORTEES DU CSU       : SrcSeq
--
--
-- FONCTIONS LOCALES DU CSU         :
--
--
-- NOTES                            :
--
-- COPYRIGHT                        : (c) Pascal Pignard 2023
-- LICENCE                          : CeCILL V2.1 (https://cecill.info)
-- CONTACT                          : http://blady.pagesperso-orange.fr
-------------------------------------------------------------------------------}

automate SrcSeq (TTokenId, NullId, Token, TTokenStr, ReadToken, `UXStrings, UXStrings.Text_IO, InSrc, OutSrc, BasicDef`)


{ Evénements définis par défaut }
default
  event CommentId to same
  event NewLineId to same
    action `    if Debug then`
           `      Status(SrcAuto, NomFich, LigneFich);`
           `      Put_Line("Fichier " & NomFich & ", ligne " & Image(LigneFich));`
           `    end if;`
  event default to error
    action `    Status(SrcAuto, NomFich, LigneFich);`
           `    Put_Line("Erreur de syntaxe à la ligne " & Image(LigneFich) & ", " & Image(Event) & ", " & Token);`


{ Définition de l'automate}
{ Etat de départ de l'automate }
from DA1
  init action `flLocalDefault := False; flDefaultDefault := False; flGosub:=False; flAction:=False;`
  event AutomId to DA2

{ Nom de l'automate }
from DA2
  event UndefId to DA3
    action `    AName := Token;`
    gosub PA1

{ Définition des événements par défaut ou d'un état }
from DA3
  event FromId to DA5
    gosub ET1
  event DefaultId to DA5
    gosub D1

{ Définition d'un autre état ou de la fin de l'automate }
from DA5
  event FromId to DA5
    gosub ET1
  event EndId to fin


{ Définition d'un état }
{ Définition de l'état courant }
from ET1
  event UndefId to ET2
    action `    AddUniq(StateList, Token);`
           `    AddNew(ObjectList, "procedure Action" & Token & " is");`
           `    AddNew(ObjectList, "  DumEvent : " & TEventStr & ";");`
           `    AddNew(ObjectList, "  begin");`
           `    AddNew(ObjectList, "  DumEvent := " & NullEventStr & ";");`
           `    if not DefaultInitList.Is_Empty and then DefaultInitList.Last_Element = Null_UXString then`
           `      DefaultInitList.Delete_Last;`
           `    end if;`
           `    CopyTo(DefaultInitList, ObjectList);`

{ Définition de l'initialisation ou des événements }
from ET2
  event InitId to ET3
  event EventId + to ET4
    action `    AddNew(ObjectList, "  case Event is");`
           `    if not DefaultEventList.Is_Empty and then DefaultEventList.Last_Element = Null_UXString then`
           `      DefaultEventList.Delete_Last;`
           `    end if;`
           `    CopyTo(DefaultEventList, ObjectList);`

{ Définition d'une autre action ou d'un événement }
from ET3
  event CallId, GosubId, ActionId, CarId + to same
    action `    DefaultOutputList := ObjectList;`
    gosub A1
  event EventId + to ET4
    action `    AddNew(ObjectList, "  case Event is");`
           `    if not DefaultEventList.Is_Empty and then DefaultEventList.Last_Element = Null_UXString then`
           `      DefaultEventList.Delete_Last;`
           `    end if;`
           `    CopyTo(DefaultEventList, ObjectList);`

{ Définition d'un autre événement, d'un autre état ou de la fin de l'automate }
from ET4
  event EventId to same
    action `    DefaultOutputList := ObjectList;`
    gosub EV1
  event FromId, EndId + to out
    action `    if flDefaultDefault and then not flLocaldefault then`
           `      if not DefaultDefaultList.Is_Empty and then DefaultDefaultList.Last_Element = Null_UXString then`
           `        DefaultDefaultList.Delete_Last;`
           `      end if;`
           `      CopyTo(DefaultDefaultList, ObjectList);`
           `    end if;`
           `    if not flLocaldefault and then not flDefaultDefault then`
           `      AddNew(ObjectList, "    when others =>");`
           `      AddNew(ObjectList, "      null;");`
           `    end if;`
           `    flLocalDefault := False;`
           `    AddNew(ObjectList, "    end case;");`
           `    AddNew(ObjectList, "  Event := DumEvent;");`
           `    AddNew(ObjectList, "  end;");`
           `    AddNew(ObjectList, Null_UXString);`


{ Définition d'un événement }
{ Nom de l'événement: identificateur ou "default" }
from EV1
  event UndefId to EV2
    action `    Add(DefaultOutputList, "    when " & Token);`
           `    AddUniq(EventList, Token);`
  event DefaultId to EV2
    action `    flLocalDefault := True;`
           `    Add(DefaultOutputList, "    when others");`

{ Définition d'une suite d"événements, du chaînage des événements ou de l'état destination }
from EV2
  event VirgId to EV3
    action `    Add(DefaultOutputList, " | ");`
  event PointPointId to EV3
    action `    Add(DefaultOutputList, " .. ");`
  event PlusId to EV4
    action `    AddNew(DefaultOutputList, " =>");`
           `    AddNew(DefaultOutputList, "      DumEvent := Event;");`
           `    flAction := True;`
  event ToId to EV5
    action `    AddNew(DefaultOutputList, " =>");`

{ Nom de l'événement }
from EV3
  event UndefId to EV2
    action `    Add(DefaultOutputList, Token);`
           `    AddUniq(EventList, Token);`

{ Définition de l'état suivant }
from EV4
  event ToId to EV5

{ Nom de l'état suivant: identificateur, "out", "error" ou "same" }
from EV5
  event UndefId to EV6
    action `    StateToStr := Token;`
  event OutId to EV6
    action `    StateToStr := "stQuit";`
  event ErrId to EV6
    action `    StateToStr := "stError";`
  event SameId to EV6
    action `    StateToStr := Null_UXString;`

{ Définition des actions, d'un autre événement, d'un autre état ou de la fin de l'automate }
from EV6
  event EventId, EndId, FromId + to out
    action `    if StateToStr /= Null_UXString then`
           `      AddNew(DefaultOutputList, "      State := " & StateToStr & ";");`
           `    else`
           `      if not flAction or flGosub then`
           `        AddNew(DefaultOutputList, "      null;");`
           `      end if;`
           `    end if;`
           `    flAction := False;`
           `    if flGosub then`
           `      AddNew(DefaultOutputList, "            else");`
           `      AddNew(DefaultOutputList, "          State := stError;");`
           `      AddNew(DefaultOutputList, "          end if;");`
           `      AddNew(DefaultOutputList, "        end;");`
           `      flGosub := False;`
           `    end if;`
  event CallId, GosubId, ActionId, CarId + to same
    action `    flAction := True;`
    gosub A1


{ Définition d'une action }
{ Définition des actions: "call", "gosub", "action", texte Ada }
from A1
  event CallId to A2
  event GosubId to A3
  event ActionId to A4
  event CarId + to A4

{ Nom du sous-automate externe }
from A2
  event UndefId to out
    action `    AddNew(DefaultOutputList, "      declare");`
           `    AddNew(DefaultOutputList, "        LResult : Boolean;");`
           `    AddNew(DefaultOutputList, "      begin");`
           `    AddNew(DefaultOutputList, "        Start" & Token & "(LResult, Debug);");`
           `    AddNew(DefaultOutputList, "        if LResult then");`
           `    AddUniq(CallUnitList, Token);`
           `    flGosub := True;`

{ Nom du sous-automate }
from A3
  event UndefId to out
    action `    AddNew(DefaultOutputList, "      declare");`
           `    AddNew(DefaultOutputList, "        LResult : Boolean;");`
           `    AddNew(DefaultOutputList, "      begin");`
           `    AddNew(DefaultOutputList, "        Automate(" & Token & ", DumEvent, " & EventDesStr &`
           `                                                ", LResult, Debug);");`
           `    AddNew(DefaultOutputList, "        if LResult then");`
           `    flGosub := True;`

{ Texte de l'action }
from A4
  event CarId to out
    action `    AddNew(DefaultOutputList, "  " & Token);`


{ Définition des actions par défaut }
{ Définition du sous-automate des initialisations et des événements par défaut }
from D1
  event InitId to D2
  event EventId + to D4

{ Définition des actions }
from D2
  event CallId, GosubId, ActionId, CarId + to D3
    action `    DefaultOutputList := DefaultInitList;`
    gosub A1

{ Définition des actions: texte Ada, "gosub", "call';
  d'un autre événement ou de la fin du sous automate }
from D3
  event FromId + to out
  event CallId, GosubId, ActionId, CarId + to same
    action `    DefaultOutputList := DefaultInitList;`
    gosub A1
  event EventId + to D4

{ Définition d'un autre événement ou de la fin du sous automate }
from D4
  event EventId to D5
  event FromId + to out

{ Nom de l'événement: identificateur ou "default" }
from D5
  event UndefId to D4
    action `    DefaultOutputList := DefaultEventList;`
           `    Add(DefaultOutputList, "    when " & Token);`
           `    AddUniq(EventList, Token);`
    gosub EV2
  event DefaultId to D4
    action `    DefaultOutputList := DefaultDefaultList;`
           `    Add(DefaultOutputList, "    when others");`
           `    flDefaultDefault := True;`
    gosub EV2

{ Définition des paramètres de l'automate }
from PA1
  event ParOuvId to PA2
  
{   - Type des événements }
from PA2
  event UndefId to PA3
    action `    TEventStr := Token;`
from PA3
  event VirgId to PA4

{   - Constante événement nul }
from PA4
  event UndefId to PA5
    action `    NullEventStr := Token;`
from PA5
  event VirgId to PA6
  
{   - Information de l'événement }
from PA6
  event UndefId to PA7
    action `    EventDesStr := Token;`
from PA7
  event VirgId to PA8
  
{   - Type des informations de l'événement }
from PA8
  event UndefId to PA9
    action `    TEventDesStr := Token;`
from PA9
  event VirgId to PA10
  
{   - Procédure de lecture des événements }
from PA10
  event UndefId to PA11
    action `    GetEventStr := Token;`
from PA11
  event VirgId to PA12
  
{   - Unité(s) à inclure }
from PA12
  event CarId to PA13
    action `    UserUnitStr := Token;`
  
from PA13
  event ParFermId to out
  
{ Fin de l'automate}
from Fin
  event EotId to out

{ Fin du texte de l'automate.}
end
